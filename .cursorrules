# Tech Stack & Project Rules

## Framework & Core Technologies
- **Next.js 15** with App Router (latest)
- **TypeScript** - Strict type checking enabled
- **React 18** with modern hooks and patterns
- **Tailwind CSS** for styling
- **shadcn/ui** - UI component library with New York theme
- **ESLint** for code linting

## Project Structure
- Uses `src/` directory structure
- App Router with `src/app/` directory
- Import alias `@/*` configured for `src/`
- TypeScript configuration in `tsconfig.json`

## Coding Standards
- Use TypeScript for all files (.ts, .tsx)
- Follow Next.js App Router conventions
- Use Tailwind CSS classes for styling
- Use shadcn/ui components with proper imports from `@/components/ui`
- Use the `cn()` utility from `@/lib/utils` for conditional class names
- Implement proper TypeScript types and interfaces
- Use ESLint rules as configured
- Follow React best practices with hooks
- Use server/client components appropriately

## File Naming Conventions
- Use kebab-case for file and folder names
- React components in PascalCase
- Use `.tsx` for React components
- Use `.ts` for utility functions and types

## Code Style
- Use functional components with hooks
- Implement proper error handling
- Use async/await for asynchronous operations
- Keep components small and focused
- Extract reusable logic into custom hooks
- Use TypeScript strict mode

## Dependencies Management
- Use npm as package manager
- Keep dependencies up to date
- Use exact versions for stability when needed

## Development Workflow
- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run lint` - Run ESLint
- `npm run start` - Start production server
